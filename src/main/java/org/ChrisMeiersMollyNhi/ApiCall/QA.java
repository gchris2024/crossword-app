/* *****************************************
 * CSCI 205 - Software Engineering and Design
 * Fall 2024
 * Instructor: Prof. Lily
 *
 * Name: Tue Nhi Cao
 * Section: 10am
 * Date: 12/2/2024
 * Time: 10:51 AM
 *
 * Project: csci205_final_project
 * Package: org.ChrisMeiersMollyNhi.ApiCall
 * Class: QA
 *
 * Description:
 * A class that interacts with the Groq API to generate a hint for a given word.
 * The class establishes a connection to the API, sends a message, and retrieves
 * the generated hint from the model's response.
 * ****************************************
 */

package org.ChrisMeiersMollyNhi.ApiCall;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class QA{
    /**
     * // API key to authenticate.
     */
    private final String apiKey;

    /**
     * The URL endpoint for the API call.
     */
    private final String url;

    /**
     * The model used for generating hints.
     */
    private final String model;

    /**
     * A constructor initialize the URL, apiKey and model.
     */
    public QA(){
        this.url = "https://api.groq.com/openai/v1/chat/completions";
        this.apiKey = System.getenv("API_KEY");
        this.model = "llama3-groq-8b-8192-tool-use-preview";

        if (this.apiKey == null || this.apiKey.isEmpty()){
            throw new IllegalStateException("API key isn't set in environment variables");
        }
    }

    /**
     * A method that create a connection to the model through apiKey
     * and generate the hint of the given word mentioned in the message.
     *
     * @param message being sent as a query to ask the model
     * @return the hint generated by the model based on the message
     */
    public String generate(String message){
        try{
            // Create the HTTP POST request
            URL obj = new URL(this.url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            // Sending data using POST request to the server (default is GET)
            con.setRequestMethod("POST");
            // Verify the apiKey with the server
            con.setRequestProperty("Authorization", "Bearer " + this.apiKey);
            // Tells the server what data is being sent in the request body
            con.setRequestProperty("Content-Type", "application/json");

            // Build the request body
            JsonObject requestBody = new JsonObject();
            requestBody.addProperty("model", this.model);
            JsonObject messageObject = new JsonObject();
            // Add a "role" key, specify that the message comes from the user, not the assistant
            messageObject.addProperty("role", "user");
            // Add a "content" key representing the text input from the user
            messageObject.addProperty("content", message);
            requestBody.add("messages", JsonParser.parseString("[" + messageObject.toString() + "]"));

            // Send the request
            con.setDoOutput(true);      // Tells the HttpURLConnection that we want to send a request body in the connection
            try (OutputStream os = con.getOutputStream()){
                os.write(requestBody.toString().getBytes());    // Convert requestBody to string and encode to bytes
                os.flush();
            }

            // Read the response
            int responseCode = con.getResponseCode();     // Retrieve HTTP status code from the server
            if (responseCode == HttpURLConnection.HTTP_OK){
                try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))){
                    StringBuilder response = new StringBuilder();
                    String inputLine;
                    while ((inputLine = in.readLine()) != null){
                        response.append(inputLine);
                    }
                    return extractContentFromResponse(response.toString());
                }
            } else {
                throw new IOException("HTTP Error: " + responseCode);
            }
        } catch (IOException e){
            throw new RuntimeException("Fail to connect with the API" + e.getMessage(), e);
        }
    }

    /**
     * Extracts the content (generated hint) from the API response JSON string.
     *
     * @param response the API response in JSON format
     * @return the extracted content (hint) as a string
     */
    public String extractContentFromResponse(String response){
        try{
            // Parse the JSON response
            JsonObject jsonResponse = JsonParser.parseString(response).getAsJsonObject();
            return jsonResponse.getAsJsonArray("choices")
                    .get(0).getAsJsonObject()
                    .getAsJsonObject("message")
                    .get("content").getAsString();      // Extract the "content" field
        } catch (Exception e){
            throw new RuntimeException("Fail to parse the response" + e.getMessage(), e);
        }
    }
}